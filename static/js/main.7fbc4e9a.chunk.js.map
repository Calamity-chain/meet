{"version":3,"sources":["Event.js","EventList.js","CitySearch.js","NbrOfEvents.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Event","state","showDetails","ShowDetailsButton","setState","event","this","props","className","summary","start","dateTime","location","href","htmlLink","description","onClick","Component","EventList","events","map","id","CitySearch","query","suggestions","handleInputChanged","value","target","locations","filter","toUpperCase","indexOf","handleItemClicked","suggestion","type","onChange","NumberOfEvents","eventValue","handleEventInputChanged","htmlFor","name","placeholder","App","Boolean","window","hostname","match","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fbc4e9a.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Event extends Component {\n  state = {\n    showDetails: false,\n  };\n\n  ShowDetailsButton = () => {\n    if (this.state.showDetails === true) {\n      this.setState({ showDetails: false });\n    } else {\n      this.setState({ showDetails: true });\n    }\n  };\n\n  render() {\n    const { event } = this.props;\n    return (\n      <div className='event-container'>\n        <h1>{event.summary}</h1>\n        <p>{event.start.dateTime}</p>\n        <p className='locations'>{event.location}</p>\n\n        {this.state.showDetails && (\n          <div className='event-details'>\n            <h2>About event:</h2>\n            <a href={event.htmlLink}>See Details</a>\n            <p>{event.description}</p>\n          </div>\n        )}\n\n        <button\n          className='show-details-btn'\n          onClick={() => this.ShowDetailsButton()}\n        >\n          {!this.state.showDetails ? 'show details' : 'hide-details'}\n        </button>\n      </div>\n    );\n  }\n}\nexport default Event;","import React, { Component } from 'react';\nimport Event from './Event';\n\nclass EventList extends Component {\n  render() {\n    const {events} = this.props;\n    return (\n      <ul className=\"EventList\">\n        {events.map(event =>\n          <li key={event.id}>\n            <Event event={event}/>\n          </li>\n          )}\n      </ul>\n    );\n  }\n}\n\nexport default EventList;","import React, {Component} from 'react';\n\nclass CitySearch extends Component {\n  state = {\n    query:'',\n    suggestions: []\n  }\n\n  handleInputChanged = (event) => {\n    const value = event.target.value;\n    const suggestions = this.props.locations.filter((location) => {\n      return location.toUpperCase().indexOf(value.toUpperCase()) > -1;\n    });\n    this.setState({\n      query: value,\n      suggestions,\n    });\n  };\n\n  handleItemClicked = (suggestion) => {\n    this.setState({\n      query: suggestion\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"CitySearch\">\n        <input \n        type=\"text\"\n        className=\"city\"\n        value={this.state.query}\n        onChange={this.handleInputChanged}\n        />\n        <ul className=\"suggestions\">\n          {this.state.suggestions.map((suggestion) => (\n            <li key={suggestion} onClick={()=> this.handleItemClicked(suggestion)}\n            >{suggestion}</li>\n          ))}\n          <li key='all'>\n              <b>See all cities</b>\n            </li>\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default CitySearch;","import React, { Component } from 'react';\n\nclass NumberOfEvents extends Component {\n  state = {\n    eventValue: 32,\n  };\n\n  handleEventInputChanged = (event) => {\n    const eventValue = event.target.value;\n    this.setState({\n      eventValue,\n    });\n  };\n\n  render() {\n    return (\n      <div className='event-number'>\n        <label htmlFor='numberOfEvent'></label>\n        <input\n          type='number'\n          name='numberOfEvent'\n          className='event-number-input'\n          placeholder='Enter Number of Events'\n          value={this.state.eventValue}\n          onChange={this.handleEventInputChanged}\n        />\n      </div>\n    );\n  }\n}\n\nexport default NumberOfEvents;\n","import React from 'react';\nimport './App.css';\nimport EventList from './EventList';\nimport CitySearch from './CitySearch';\nimport NumberOfEvents from './NbrOfEvents';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CitySearch/>\n      <NumberOfEvents />\n      <EventList events={[]}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}